service: improve-v5
provider:
  name: aws
  region: us-west-2
  runtime: nodejs10.x
  timeout: 300
  memorySize: 192
  environment:
    #
    # Customize your deployment here:
    #
    FEATURE_TRAINING_IMAGE: 117097735164.dkr.ecr.us-west-2.amazonaws.com/improve_trainer-dev:latest 
    FEATURE_TRAINING_INSTANCE_TYPE: ml.m5.large
    FEATURE_TRAINING_INSTANCE_COUNT: 1
    FEATURE_TRAINING_VOLUME_SIZE_IN_GB: 1
    FEATURE_TRAINING_MAX_RUNTIME_IN_SECONDS: 172800 # 2 days
    TRANSFORM_INSTANCE_TYPE: ml.m5.large
    TRANSFORM_INSTANCE_COUNT: 2
    XGBOOST_TRAINING_INSTANCE_TYPE: ml.m5.large
    XGBOOST_TRAINING_INSTANCE_COUNT: 2
    XGBOOST_TRAINING_VOLUME_SIZE_IN_GB: 1
    XGBOOST_TRAINING_MAX_RUNTIME_IN_SECONDS: 172800 # 2 days
    HOSTING_INSTANCE_TYPE: ml.t2.medium # Note that t* instance types don't support autoscaling
    HOSTING_INITIAL_INSTANCE_COUNT: 1 # should be large enough that model updates can immediately serve a production load without waiting for auto-scaling
    # 
    # End customization
    #
    HOSTING_IMAGE: 117097735164.dkr.ecr.us-west-2.amazonaws.com/decision_service-dev:latest 
    FEATURE_TRAINING_ROLE_ARN: ${cf:${self:service}-resources-${opt:stage, self:provider.stage}.SagemakerExecutionRoleArn}
    FIREHOSE_DELIVERY_STREAM_NAME: ${cf:${self:service}-resources-${opt:stage, self:provider.stage}.V4Firehose}
    RECORDS_BUCKET: ${cf:${self:service}-resources-${opt:stage, self:provider.stage}.RecordsS3Bucket}
    MODELS_BUCKET: ${cf:${self:service}-resources-${opt:stage, self:provider.stage}.ModelsS3Bucket}
    SERVICE: ${self:service}
    STAGE: ${opt:stage, self:provider.stage}
  iamRoleStatements: 
    - Effect: Allow
      Action:
        - "firehose:*"
      Resource: "arn:aws:firehose:*:*:deliverystream/${cf:${self:service}-resources-${opt:stage, self:provider.stage}.V4Firehose}"
    - Effect: Allow
      Action:
        - "s3:*"
      Resource: 'arn:aws:s3:::${self:service}-resources-${opt:stage, self:provider.stage}-*'
    - Effect: Allow
      Action:
        - "sagemaker:*"
      Resource: '*'
    - Effect: Allow
      Action:
        - "iam:PassRole"
      Resource: ${cf:${self:service}-resources-${opt:stage, self:provider.stage}.SagemakerExecutionRoleArn}

functions:
  dispatchTrainingJobs:
    handler: train_deploy.dispatchTrainingJobs
    events:
      #
      # CUSTOMIZE: The training rate trades off between learning latency and cost
      #
      - schedule: rate(24 hours)
  choose:
    handler: api.choose
    timeout: 6
    events:
      - http:
          path: choose
          method: post
          cors: true
#          private: true
  track:
    handler: api.track
    timeout: 6
    events:
      - http:
          path: track
          method: post
          cors: true
          private: true # uncomment if you wish to require authentication via API Gateway
  using:
    handler: api.using
    timeout: 6
    events:
      - http:
          path: using
          method: post
          cors: true
          private: true
  rewards:
    handler: api.rewards
    timeout: 6
    events:
      - http:
          path: rewards
          method: post
          cors: true
          private: true
  unpackFirehose:
    handler: unpack_firehose.unpackFirehose
    memorySize: 1024 # needs to be able to unpack the entire firehose buffer into memory. Buffer size is configured in resources/serverless.yml
    events:
      - s3:
          bucket: ${cf:${self:service}-resources-${opt:stage, self:provider.stage}.FirehoseS3Bucket}
          existing: true # created in resources/serverless.yml
          event: s3:ObjectCreated:*
  join:
    handler: join.join
    events:
      - s3:
          bucket: ${cf:${self:service}-resources-${opt:stage, self:provider.stage}.RecordsS3Bucket}
          existing: true # created in resources/serverless.yml
          event: s3:ObjectCreated:*
          rules:
            - prefix: histories/
            - suffix: .gz
  featureModelCreated:
    handler: train_deploy.featureModelCreated
    events:
      - s3:
          bucket: ${cf:${self:service}-resources-${opt:stage, self:provider.stage}.RecordsS3Bucket}
          existing: true # created in resources/serverless.yml
          event: s3:ObjectCreated:*
          rules:
            - prefix: feature_models/
            - suffix: model.tar.gz
  xgboostModelCreated:
    handler: train_deploy.xgboostModelCreated
    events:
      - s3:
          bucket: ${cf:${self:service}-resources-${opt:stage, self:provider.stage}.RecordsS3Bucket}
          existing: true # created in resources/serverless.yml
          event: s3:ObjectCreated:*
          rules:
            - prefix: xgboost_models/
            - suffix: model.tar.gz
  transformJobCompleted:
    handler: train_deploy.transformJobCompleted
    events:
      - cloudwatchEvent:
          event:
            source:
              - 'aws.sagemaker'
            detail-type:
              - 'SageMaker Transform Job State Change'
            detail:
              TransformJobStatus:
                - Completed
