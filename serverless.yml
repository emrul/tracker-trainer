service: improve-v5
provider:
  name: aws
  region: us-west-2
  runtime: nodejs10.x
  timeout: 6
  memorySize: 192
  environment:
    #
    # Customize your deployment here:
    #
    TRAINING_IMAGE: 117097735164.dkr.ecr.us-west-2.amazonaws.com/decision_service-dev:latest # Scalable Decision Service image using XGBoost
    # TRAINING_IMAGE: 117097735164.dkr.ecr.us-east-2.amazonaws.com/multi_armed_bandit:latest # Multi-Armed Bandit image for Thompson Sampling/Bayesian Bandits and Epsilon Greedy
    TRAINING_INSTANCE_TYPE: ml.m5.large # choose an instance type with enough memory to hold the entire training set
    TRAINING_INSTANCE_COUNT: 1 # scale up training through parallel execution
    TRAINING_VOLUME_SIZE_IN_GB: 20 # must be at least 2x the training data size
    TRAINING_MAX_RUNTIME_IN_SECONDS: 172800 # 2 days
    HOSTING_INSTANCE_TYPE: ml.t2.medium # Note that t* instance types don't support autoscaling
    HOSTING_INITIAL_INSTANCE_COUNT: 1 # should be large enough that model updates can immediately serve a production load without waiting for auto-scaling
    # 
    # End customization
    #
    HOSTING_IMAGE: ${self:provider.environment.TRAINING_IMAGE}
    TRAINING_ROLE_ARN: ${cf:${self:service}-resources-${opt:stage, self:provider.stage}.SagemakerExecutionRoleArn}
    FIREHOSE_DELIVERY_STREAM_NAME: ${cf:${self:service}-resources-${opt:stage, self:provider.stage}.V4Firehose}
    RECORDS_BUCKET: ${cf:${self:service}-resources-${opt:stage, self:provider.stage}.RecordsS3Bucket}
    MODELS_BUCKET: ${cf:${self:service}-resources-${opt:stage, self:provider.stage}.ModelsS3Bucket}
    SERVICE: ${self:service}
    STAGE: ${opt:stage, self:provider.stage}
  iamRoleStatements: 
    - Effect: Allow
      Action:
        - "firehose:*"
      Resource: "arn:aws:firehose:*:*:deliverystream/${cf:${self:service}-resources-${opt:stage, self:provider.stage}.V4Firehose}"
    - Effect: Allow
      Action:
        - "s3:*"
      Resource: 'arn:aws:s3:::${self:service}-resources-${opt:stage, self:provider.stage}-*'
    - Effect: Allow
      Action:
        - "sagemaker:*"
      Resource: '*'
    - Effect: Allow
      Action:
        - "iam:PassRole"
      Resource: ${cf:${self:service}-resources-${opt:stage, self:provider.stage}.SagemakerExecutionRoleArn}

functions:
  choose:
    handler: api.choose
    events:
      - http:
          path: choose
          method: post
          cors: true
#          private: true
  track:
    handler: api.track
    events:
      - http:
          path: track
          method: post
          cors: true
          private: true # uncomment if you wish to require authentication via API Gateway
  using:
    handler: api.using
    events:
      - http:
          path: using
          method: post
          cors: true
          private: true
  rewards:
    handler: api.rewards
    events:
      - http:
          path: rewards
          method: post
          cors: true
          private: true
  unpackFirehose:
    handler: unpack_firehose.unpackFirehose
    memorySize: 1024
    timeout: 300
    events:
      - s3:
          bucket: ${cf:${self:service}-resources-${opt:stage, self:provider.stage}.FirehoseS3Bucket}
          event: s3:ObjectCreated:*
          existing: true # the bucket is created in resources/serverless.yml so that it is retained upon deletion of this service
  dispatchTrainingJobs:
    handler: train_deploy.dispatchTrainingJobs
    timeout: 300
    events:
      - schedule: rate(24 hours)
  deployUpdatedModels:
    handler: train_deploy.deployUpdatedModels
    timeout: 300
    events:
      - schedule: rate(1 minute)